import z from "zod";
import { MysticError } from "../../transmuted-errors/MysticError";
import { SynthesizedError } from "../../transmuted-errors/SynthesizedError";
export declare const DetectorFunction: z.ZodFunction<z.ZodTuple<[z.ZodUnknown], null>, z.ZodBoolean>;
export type DetectorFunction = (err: unknown) => boolean;
export declare const TransmuterFunction: z.ZodFunction<z.ZodTuple<[z.ZodUnknown], null>, z.ZodUnion<[z.ZodType<SynthesizedError, z.ZodTypeDef, SynthesizedError>, z.ZodType<MysticError, z.ZodTypeDef, MysticError>]>>;
export type TransmuterFunction<T = any> = (err: T) => SynthesizedError | MysticError;
export declare const Transmuter: z.ZodObject<{
    detect: z.ZodFunction<z.ZodTuple<[z.ZodUnknown], null>, z.ZodBoolean>;
    transmute: z.ZodFunction<z.ZodTuple<[z.ZodUnknown], null>, z.ZodUnion<[z.ZodType<SynthesizedError, z.ZodTypeDef, SynthesizedError>, z.ZodType<MysticError, z.ZodTypeDef, MysticError>]>>;
    execute: z.ZodFunction<z.ZodTuple<[z.ZodUnknown], null>, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    detect: (args_0: unknown) => boolean;
    transmute: (args_0: unknown) => MysticError | SynthesizedError;
    execute: (args_0: unknown) => unknown;
}, {
    detect: (args_0: unknown) => boolean;
    transmute: (args_0: unknown) => MysticError | SynthesizedError;
    execute: (args_0: unknown) => unknown;
}>;
export interface Transmuter<T = any> {
    detect: DetectorFunction;
    transmute: TransmuterFunction<T>;
    execute: (err: unknown) => MysticError | SynthesizedError | unknown;
}
//# sourceMappingURL=types.d.ts.map