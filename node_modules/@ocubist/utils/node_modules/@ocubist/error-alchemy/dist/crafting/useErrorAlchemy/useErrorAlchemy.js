"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useErrorAlchemy = exports.AlchemyCraftErrorProps = void 0;
var types_1 = require("../craft-errors/types");
var TransmutedError_1 = require("../../transmuted-errors/TransmutedError");
var craftErrorTransmuter_1 = require("../Transmuter/craftErrorTransmuter");
var craftErrorSynthesizer_1 = require("../Synthesizer/craftErrorSynthesizer");
var craftMysticError_1 = require("../craft-errors/craftMysticError");
var craftSynthesizedError_1 = require("../craft-errors/craftSynthesizedError");
var craftErrorLogger_1 = require("../Resolver/craftErrorLogger");
var craftErrorResolverMap_1 = require("../Resolver/craftErrorResolverMap");
var craftErrorResolver_1 = require("../Resolver/craftErrorResolver");
exports.AlchemyCraftErrorProps = types_1.CraftErrorProps.omit({
    context: true,
    module: true,
});
var useErrorAlchemy = function (module, context) {
    // # craftErrorTransmuter
    var _craftErrorTransmuter = function (detectorFunction, transmuterFunction) {
        var newTransmuterFunction = function (err) {
            var result = transmuterFunction(err);
            result.context = context;
            result.module = module;
            return result;
        };
        return (0, craftErrorTransmuter_1.craftErrorTransmuter)(detectorFunction, newTransmuterFunction);
    };
    // # craftErrorSynthesizer
    var _craftErrorSynthesizer = function (middlewareChain) {
        var originalSynthesizer = (0, craftErrorSynthesizer_1.craftErrorSynthesizer)(middlewareChain);
        var newSynthesizer = {
            middlewareChain: originalSynthesizer.middlewareChain,
            synthesize: function (err) {
                var result = originalSynthesizer.synthesize(err);
                if (result !== err && result instanceof TransmutedError_1.TransmutedError) {
                    result.module = module;
                    result.context = context;
                }
                return result;
            },
        };
        // newSynthesizer.synthesize = (err: unknown) => {
        //   const result = originalSynthesizeFunction(err);
        //   if (result !== err && result instanceof TransmutedError) {
        //     result.module = module;
        //     result.context = context;
        //   }
        // };
        return newSynthesizer;
    };
    // # craftMysticError
    var _craftMysticError = function (props) {
        var craftProps = __assign(__assign({}, props), { module: module, context: context });
        return (0, craftMysticError_1.craftMysticError)(craftProps);
    };
    // # craftSynthesizedError
    var _craftSynthesizedError = function (props) {
        var craftProps = __assign(__assign({}, props), { module: module, context: context });
        return (0, craftSynthesizedError_1.craftSynthesizedError)(craftProps);
    };
    return {
        craftErrorSynthesizer: _craftErrorSynthesizer,
        craftMysticError: _craftMysticError,
        craftSynthesizedError: _craftSynthesizedError,
        craftErrorTransmuter: _craftErrorTransmuter,
        craftErrorLogger: craftErrorLogger_1.craftErrorLogger,
        craftErrorResolverMap: craftErrorResolverMap_1.craftErrorResolverMap,
        craftErrorResolver: craftErrorResolver_1.craftErrorResolver,
    };
};
exports.useErrorAlchemy = useErrorAlchemy;
//# sourceMappingURL=useErrorAlchemy.js.map