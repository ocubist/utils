import { z } from "zod";
import { Severity } from "../severity/types";
import { ErrorCode } from "../error-code/types";
export declare const Payload: z.ZodRecord<z.ZodString, z.ZodUnknown>;
export type Payload = z.infer<typeof Payload>;
export declare const TransmutedErrorProps: z.ZodObject<{
    message: z.ZodString;
    name: z.ZodString;
    severity: z.ZodOptional<z.ZodEnum<[Severity, ...Severity[]]>>;
    origin: z.ZodOptional<z.ZodUnknown>;
    cause: z.ZodOptional<z.ZodString>;
    payload: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    module: z.ZodOptional<z.ZodString>;
    context: z.ZodOptional<z.ZodString>;
    errorCode: z.ZodOptional<z.ZodEnum<[ErrorCode, ...ErrorCode[]]>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    name: string;
    severity?: Severity | undefined;
    origin?: unknown;
    cause?: string | undefined;
    payload?: Record<string, unknown> | undefined;
    module?: string | undefined;
    context?: string | undefined;
    errorCode?: ErrorCode | undefined;
}, {
    message: string;
    name: string;
    severity?: Severity | undefined;
    origin?: unknown;
    cause?: string | undefined;
    payload?: Record<string, unknown> | undefined;
    module?: string | undefined;
    context?: string | undefined;
    errorCode?: ErrorCode | undefined;
}>;
export type TransmutedErrorProps = z.infer<typeof TransmutedErrorProps>;
//# sourceMappingURL=types.d.ts.map