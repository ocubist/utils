import z from "zod";

import { CraftErrorProps } from "../craft-errors/types";
import {
  DetectorFunction,
  Transmuter,
  TransmuterFunction,
} from "../Transmuter/types";
import { TransmutedError } from "../../transmuted-errors/TransmutedError";

import { Synthesizer, SynthesizerMiddlewareChain } from "../Synthesizer/types";
import { craftErrorTransmuter } from "../Transmuter/craftErrorTransmuter";
import { craftErrorSynthesizer } from "../Synthesizer/craftErrorSynthesizer";
import { craftMysticError } from "../craft-errors/craftMysticError";
import { craftSynthesizedError } from "../craft-errors/craftSynthesizedError";
import { craftErrorLogger } from "../Resolver/craftErrorLogger";
import { craftErrorResolverMap } from "../Resolver/craftErrorResolverMap";
import { craftErrorResolver } from "../Resolver/craftErrorResolver";

export const AlchemyCraftErrorProps = CraftErrorProps.omit({
  context: true,
  module: true,
});
export type AlchemyCraftErrorProps = z.infer<typeof AlchemyCraftErrorProps>;

export const useErrorAlchemy = (module: string, context: string) => {
  // # craftErrorTransmuter
  const _craftErrorTransmuter = <T = any>(
    detectorFunction: DetectorFunction,
    transmuterFunction: TransmuterFunction<T>
  ): Transmuter<T> => {
    const newTransmuterFunction: TransmuterFunction<T> = (err: T) => {
      const result = transmuterFunction(err);
      result.context = context;
      result.module = module;
      return result;
    };

    return craftErrorTransmuter<T>(detectorFunction, newTransmuterFunction);
  };

  // # craftErrorSynthesizer
  const _craftErrorSynthesizer = (
    middlewareChain: SynthesizerMiddlewareChain
  ) => {
    const originalSynthesizer = craftErrorSynthesizer(middlewareChain);

    const newSynthesizer: Synthesizer = {
      middlewareChain: originalSynthesizer.middlewareChain,
      synthesize: (err: unknown) => {
        const result = originalSynthesizer.synthesize(err);
        if (result !== err && result instanceof TransmutedError) {
          result.module = module;
          result.context = context;
        }
        return result;
      },
    };

    // newSynthesizer.synthesize = (err: unknown) => {
    //   const result = originalSynthesizeFunction(err);
    //   if (result !== err && result instanceof TransmutedError) {
    //     result.module = module;
    //     result.context = context;
    //   }
    // };

    return newSynthesizer;
  };

  // # craftMysticError
  const _craftMysticError = (props: AlchemyCraftErrorProps) => {
    const craftProps = { ...props, module, context };
    return craftMysticError(craftProps);
  };

  // # craftSynthesizedError
  const _craftSynthesizedError = (props: AlchemyCraftErrorProps) => {
    const craftProps = { ...props, module, context };
    return craftSynthesizedError(craftProps);
  };

  return {
    craftErrorSynthesizer: _craftErrorSynthesizer,
    craftMysticError: _craftMysticError,
    craftSynthesizedError: _craftSynthesizedError,
    craftErrorTransmuter: _craftErrorTransmuter,
    craftErrorLogger,
    craftErrorResolverMap,
    craftErrorResolver,
  };
};
