import z, { ZodError, ZodSchema } from "zod";

import { useErrorAlchemy } from "../../../crafting/useErrorAlchemy/useErrorAlchemy";
import { extractZodErrorValidationDetails } from "../../../utility/PropsValidationError";
import { MysticError } from "../../../transmuted-errors/MysticError";

const { craftMysticError, craftErrorTransmuter } = useErrorAlchemy(
  "ErrorAlchemy",
  "assert-function"
);

export const AssertFailedError = craftMysticError({
  name: "AssertFailedError",
  errorCode: "DATA_INTEGRITY_VIOLATION",
  severity: "critical",
  cause: "Zod validation failed",
});

const assertFailedTransmuter = craftErrorTransmuter(
  (err) => {
    // console.log("ENTER DETECTOR");
    return err instanceof ZodError;
  },
  (err: ZodError) => {
    const details = extractZodErrorValidationDetails(err);
    // console.log("ENTER TRANSMUTER");
    return new AssertFailedError({
      message: details.map((d) => d.msg).join(" | "),
      payload: {
        validationErrorDetails: details,
      },
      origin: err,
    });
  }
);

export function assert<T>(
  value: unknown,
  schema?: ZodSchema<T>
): asserts value is T {
  // console.log("enters assert function...");

  if (schema !== undefined) {
    try {
      schema.parse(value);
    } catch (err) {
      // console.log("The error thrown:", err);
      throw assertFailedTransmuter.execute(err);
    }
  }
}
