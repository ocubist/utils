import { ZodError, z } from "zod";

export const ZodErrorValidationDetails = z.object({
  path: z.string(),
  msg: z.string(),
});
export type ZodErrorValidationDetails = z.infer<
  typeof ZodErrorValidationDetails
>;

export const extractZodErrorValidationDetails = (
  zod: ZodError
): ZodErrorValidationDetails[] => {
  return zod.errors.map((e) => {
    return {
      path: e.path.join("."),
      msg: e.message,
    };
  });
};

export const stringifyZodErrorValidationDetails = (
  validationDetails: ZodErrorValidationDetails[]
) => {
  return validationDetails
    .map((vd) => {
      return `${vd.path}: ${vd.msg}`;
    })
    .join(" | ");
};

export class AlchemyPropsValidationError extends Error {
  zodError: ZodError;

  constructor(zodError: ZodError) {
    super(
      `Props failed to validate: '${stringifyZodErrorValidationDetails(
        extractZodErrorValidationDetails(zodError)
      )}'`
    );
    this.zodError = zodError;
  }
}
