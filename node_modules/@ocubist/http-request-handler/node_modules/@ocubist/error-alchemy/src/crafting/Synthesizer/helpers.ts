import { SynthesizedError } from "../../transmuted-errors/SynthesizedError";
import { Transmuter } from "../Transmuter/types";

import { Synthesizer, SynthesizerMiddlewareChain } from "./types";

export function flattenMiddlewareChain(
  middlewareChain: SynthesizerMiddlewareChain
) {
  const result: Transmuter[] = [];

  middlewareChain.forEach((mw) => {
    if (Array.isArray(mw)) {
      result.push(...flattenMiddlewareChain(mw));
    } else if (Synthesizer.safeParse(mw).success) {
      result.push(...(mw as Synthesizer).middlewareChain);
    } else {
      result.push(mw as Transmuter);
    }
  });

  return result;
}

export const executeSynthesizerMiddlewareOneByOne = (
  err: unknown,
  transmuters: Transmuter[]
) => {
  let result = err;

  for (const mw of transmuters) {
    result = mw.execute(result);
    if (result instanceof SynthesizedError) break;
  }

  return result;
};
