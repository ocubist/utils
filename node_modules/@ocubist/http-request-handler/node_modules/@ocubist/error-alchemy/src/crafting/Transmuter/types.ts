import z from "zod";
import { MysticError } from "../../transmuted-errors/MysticError";
import { SynthesizedError } from "../../transmuted-errors/SynthesizedError";

export const DetectorFunction = z.function(z.tuple([z.unknown()]), z.boolean());
export type DetectorFunction = (err: unknown) => boolean;

export const TransmuterFunction = z.function(
  z.tuple([z.unknown()]),
  z.union([z.instanceof(SynthesizedError), z.instanceof(MysticError)])
);
export type TransmuterFunction<T = any> = (
  err: T
) => SynthesizedError | MysticError;

export const Transmuter = z.object({
  detect: DetectorFunction,
  transmute: TransmuterFunction,
  execute: z.function(z.tuple([z.unknown()]), z.unknown()),
});
export interface Transmuter<T = any> {
  detect: DetectorFunction;
  transmute: TransmuterFunction<T>;
  execute: (err: unknown) => MysticError | SynthesizedError | unknown;
}
