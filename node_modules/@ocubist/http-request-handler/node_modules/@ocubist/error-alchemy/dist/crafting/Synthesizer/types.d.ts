import z from "zod";
import { Transmuter } from "../Transmuter/types";
export type SynthesizerMiddlewareChain = Array<Transmuter | Synthesizer | SynthesizerMiddlewareChain>;
export declare const Synthesizer: z.ZodLazy<z.ZodObject<{
    middlewareChain: z.ZodArray<z.ZodObject<{
        detect: z.ZodFunction<z.ZodTuple<[z.ZodUnknown], null>, z.ZodBoolean>;
        transmute: z.ZodFunction<z.ZodTuple<[z.ZodUnknown], null>, z.ZodUnion<[z.ZodType<import("../..").SynthesizedError, z.ZodTypeDef, import("../..").SynthesizedError>, z.ZodType<import("../..").MysticError, z.ZodTypeDef, import("../..").MysticError>]>>;
        execute: z.ZodFunction<z.ZodTuple<[z.ZodUnknown], null>, z.ZodUnknown>;
    }, "strip", z.ZodTypeAny, {
        detect: (args_0: unknown) => boolean;
        transmute: (args_0: unknown) => import("../..").MysticError | import("../..").SynthesizedError;
        execute: (args_0: unknown) => unknown;
    }, {
        detect: (args_0: unknown) => boolean;
        transmute: (args_0: unknown) => import("../..").MysticError | import("../..").SynthesizedError;
        execute: (args_0: unknown) => unknown;
    }>, "many">;
    synthesize: z.ZodFunction<z.ZodTuple<[z.ZodUnknown], null>, z.ZodUnknown>;
}, "strip", z.ZodTypeAny, {
    middlewareChain: {
        detect: (args_0: unknown) => boolean;
        transmute: (args_0: unknown) => import("../..").MysticError | import("../..").SynthesizedError;
        execute: (args_0: unknown) => unknown;
    }[];
    synthesize: (args_0: unknown) => unknown;
}, {
    middlewareChain: {
        detect: (args_0: unknown) => boolean;
        transmute: (args_0: unknown) => import("../..").MysticError | import("../..").SynthesizedError;
        execute: (args_0: unknown) => unknown;
    }[];
    synthesize: (args_0: unknown) => unknown;
}>>;
export interface Synthesizer {
    middlewareChain: Transmuter[];
    synthesize: (err: unknown) => unknown;
}
//# sourceMappingURL=types.d.ts.map